#include <pthread.h>
#include <cstdio>
#include <cstdlib>

// Вариант 27
// Задача о Винни-Пухе - 3 или мстительные пчелы.
// Неправильные пчелы, подсчитав в конце месяца убытки от наличия в лесу Винни-Пуха, решили
// разыскать его и наказать в назидание всем другим любителям сладкого.
// Для поисков медведя они поделили лес на участки, каждый из которых прочесывает одна стая
// неправильных пчел. В случае нахождения медведя на своем участке стая проводит показательное
// наказание и возвращается в улей. Если участок прочесан, а Винни-Пух на нем не обнаружен, стая
// также возвращается в улей. Там она получает информацию об еще неисследованных участках и снова
// улетает. Требуется создать многопоточное приложение, моделирующее действия пчел. При решении
// использовать парадигму портфеля задач.

// Массив, представляющий поделённый на участки лес (значение forest[x][y] = true, если на участке
// (x,y) находится Винни-Пух). Размер леса = 10х10 и взят произвольно.
static bool forest[10][10];

// Портфель задач.
static int nextArea = 0;

static bool isWinnieThePoohFound = false;

// Потоковая функция пчелы (принимает в качестве args номер пчелы).
void *bee(void *args) {
    // x, y - координаты текущего участка для поиска (т.е. текущая задача); num - номер пчелы.
    int x, y, num = *(int *)args + 1;
    // Получение задачи из портфеля, неделимо выполняя операции.
    {
        // Выяснение следующей задачи из портфеля.
        x = nextArea / 10;
        y = nextArea % 10;
        // Увеличение портфеля задач на 1 (чтобы следующая пчела получила следующую задачу).
        ++nextArea;
    }
    // Проверка условия выхода из цикла выполнения задач.
    while (x < 10 && y < 10 && !isWinnieThePoohFound) {
        // Выполнение текущей задачи.
        if (forest[x][y]) {
            {
                printf("Winnie the Pooh is found and punished at (%d,%d) by Bee №%d\n", x, y, num);
                isWinnieThePoohFound = true;
            }
        } else {
            printf("Winnie the Pooh is not found at (%d,%d), thus Bee №%d returns to the hive\n", x,
                   y, num);
        }
        // Получение следующей задачи из портфеля, неделимо выполняя операции (так же, как и до этого).
        {
            x = nextArea / 10;
            y = nextArea % 10;
            ++nextArea;
        }
    }
    return NULL;
}

int main(int argc, char **argv) {
    // Получение координат Винни-Пуха и количества пчел из аргументов командной строки.
    int x, y, beeCount;
    if (argc != 4) {
        printf("Введите координаты Винни-Пуха и количество пчел через пробел:\n");
        scanf("%d %d %d", &x, &y, &beeCount);
    } else {
        x = atoi(argv[1]);
        y = atoi(argv[2]);
        beeCount = atoi(argv[3]);
    }
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            forest[i][j] = false;
        }
    }
    forest[x][y] = true;
    // Создание и запуск потоков-пчел.
    pthread_t bees[beeCount];
    int beeIDs[beeCount];
    for (int i = 0; i < beeCount; i++) {
        beeIDs[i] = i;
        pthread_create(&bees[i], NULL, bee, (void *)&beeIDs[i]);
    }
    for (int i = 0; i < beeCount; i++) {
        pthread_join(bees[i], NULL);
    }
    return 0;
}